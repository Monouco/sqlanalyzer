{"mapbox_accounts0": {"main": "SELECT id,\n       email AS email_accounts,\n       accountlevel\nFROM mapbox_customer_data.accounts\nWHERE dt = '{run_date}'\n  AND COALESCE(LOWER(email), 'NULL') NOT LIKE ('%@mapbox.com')\n  AND COALESCE(accountlevel, 'NULL') NOT IN ('staff',\n                                             'mapbox-no-bill-1')\n  AND id NOT IN ('streets-review-production') ), "}, "mbx_verticals": {"no alias": "SELECT *,           max(dt) OVER (PARTITION BY 'dummy') AS max_dt    FROM analytics.mbx_account_verticals", "main": "SELECT mapbox_account_id,\n       vertical\nFROM\nWHERE dt = max_dt ), "}, "mbx_sfdc_accounts": {"a": "sfdc.mapbox_accounts", "b.id": "AND b.dt = '{run_date}' AND a.salesforce_account_id =", "main": "SELECT a.*,\n       b.name AS sfdc_account_name\nFROM sfdc.mapbox_accounts a\nLEFT JOIN sfdc.accounts b ON a.dt = '{run_date}'\nWHERE a.dt = '{run_date}' ), "}, "enterprise_exception": {"(sfdc_acct_id)),": "VALUES ('0013600000QmuNtAAJ') ,('00136000005AxApAAK') ,('00136000005AxMbAAK') ,('0013600001KDnawAAD') ,('0011R000020WJXyQAO') ,('00136000005AxCgAAK') ,('00136000005AxElAAK') ,('0013600001KDUFDAA5') ,('00136000005AxLLAA0') ,('00136000005Ax5QAAS') ,('00136000005AxLgAAK')) AS v", "main": "SELECT *\nFROM (\n      VALUES ('0013600000QmuNtAAJ') ,('00136000005AxApAAK') ,('00136000005AxMbAAK') ,('0013600001KDnawAAD') ,('0011R000020WJXyQAO') ,('00136000005AxCgAAK') ,('00136000005AxElAAK') ,('0013600001KDUFDAA5') ,('00136000005AxLLAA0') ,('00136000005Ax5QAAS') ,('00136000005AxLgAAK')) AS v (sfdc_acct_id)), "}, "apa_deals0": {"no alias": "SELECT *,           max(dt) OVER (PARTITION BY 'dummy') AS max_dt    FROM analytics.apa_deals", "main": "SELECT mbx_acct_id,\n       prd_start_date,\n       prd_end_date\nFROM\nWHERE dt = max_dt ), "}, "apa_deals": {"apa": "apa_deals0", "rcal": "IGHT JOIN analytics.ref_calendar", "main": "SELECT DISTINCT rcal.vdate,\n                apa.mbx_acct_id\nFROM apa_deals0 apa rcal ON rcal.vdate BETWEEN apa.prd_start_date AND apa.prd_end_date),"}, "paygo_free": "SELECT DISTINCT DATE(DATE_TRUNC('month', inv.date)) AS date_month,\n                mbxacct.id AS mbx_acct_id\nFROM payments.stripe_invoices inv\nINNER JOIN payments.stripe_discounts disc ON inv.discount_id = disc.id\nINNER JOIN payments.stripe_coupons coup ON disc.coupon_id = coup.id\nAND coup.duration IN ('forever',\n                      'repeating')\nAND coup.percent_off = 100\nINNER JOIN mapbox_customer_data.accounts mbxacct ON inv.customer_id = mbxacct.customerid\nAND mbxacct.dt = '{run_date}'\nWHERE inv.date >= DATE('2019-05-01') ),", "cohort_mapping": "SELECT id,\n       email_accounts,\n       sfdc_account_id,\n       vertical,\n       revenue_group,\n       CASE\n           WHEN revenue_group IN ('enterprise exception') THEN 'Cohort 1'\n           WHEN revenue_group IN ('enterprise longtail',\n                                  'spp') THEN 'Cohort 2'\n           ELSE 'Cohort 3'\n       END AS cohort\nFROM\n  (SELECT a.id,\n          a.email_accounts,\n          mbx_sfdc.salesforce_account_id AS sfdc_account_id,\n          COALESCE(b.vertical, 'none') AS vertical,\n          CASE\n              WHEN entexp.sfdc_acct_id IS NOT NULL THEN 'enterprise exception'\n              WHEN spp.mbx_acct_id IS NOT NULL THEN 'spp'\n              WHEN a.accountlevel = 'enterprise' THEN 'enterprise longtail'\n              WHEN pfree.mbx_acct_id IS NOT NULL THEN 'paygo_free'\n              ELSE 'paygo'\n          END AS revenue_group\n   FROM mapbox_accounts0 a\n   LEFT JOIN mbx_verticals b ON a.id = b.mapbox_account_id\n   LEFT JOIN mbx_sfdc_accounts mbx_sfdc ON a.id = mbx_sfdc.mapbox_account_id\n   LEFT JOIN enterprise_exception entexp ON mbx_sfdc.salesforce_account_id = entexp.sfdc_acct_id\n   LEFT JOIN apa_deals spp ON a.id = spp.mbx_acct_id\n   AND spp.vdate = DATE('{run_date}')\n   LEFT JOIN paygo_free pfree ON a.id = pfree.mbx_acct_id\n   AND pfree.date_month BETWEEN ADD_MONTHS(DATE('{run_date}'), -1) AND DATE_SUB(DATE('{run_date}'), 1))),", "service_mapping": {"no alias": "SELECT DISTINCT sku_id,                    service_org,                    dt,                    max(dt) OVER (PARTITION BY 'dummy') AS max_dt    FROM analytics.service_endpoint_mapping    WHERE cast(dt AS DATE) >= CURRENT_DATE - INTERVAL '4' DAY ", "main": "SELECT DISTINCT sku_id AS service,\n                service_org\nFROM\nWHERE dt = max_dt ), "}, "weekly_data0": "SELECT (date_trunc('WEEK',(cast(a.dt AS DATE) + INTERVAL '1' DAY)) - INTERVAL '1' DAY) AS dt_week,\n       a.log_source,\n       a.platform,\n       a.service,\n       COALESCE(c.service_org, 'other') AS service_org,\n       CASE\n           WHEN a.status_code IN (301,\n                                  302,\n                                  307)\n                OR a.status_code >= 400 THEN 'non_billable'\n           ELSE 'billable'\n       END AS status_code,\n       CASE\n           WHEN a.request_type IS NULL THEN 'non_billable'\n           ELSE a.request_type\n       END AS request_type,\n       b.cohort,\n       'all_cohort' AS dummy,\n       b.vertical,\n       a.account,\n       COALESCE(b.sfdc_account_id, a.account) AS sfdc_account_id,\n       sum(a.num_requests) AS num_requests\nFROM analytics.api_requests a\nINNER JOIN cohort_mapping b ON a.account = b.id\nLEFT JOIN service_mapping c ON a.service = c.service\nWHERE cast(a.dt AS DATE) > cast('{run_date}' AS DATE) - INTERVAL '14' DAY\n  AND cast(a.dt AS DATE) <= cast('{run_date}' AS DATE)\n  AND a.account != 'unknown'\nGROUP BY 1,\n         2,\n         3,\n         4,\n         5,\n         6,\n         7,\n         8,\n         9,\n         10,\n         11,\n         12\nUNION ALL\nSELECT (date_trunc('WEEK',(cast(a.dt AS DATE) + INTERVAL '1' DAY)) - INTERVAL '1' DAY) AS dt_week,\n       a.log_source,\n       a.platform,\n       a.service,\n       COALESCE(c.service_org, 'other') AS service_org,\n       CASE\n           WHEN a.status_code IN (301,\n                                  302,\n                                  307)\n                OR a.status_code >= 400 THEN 'non_billable'\n           ELSE 'billable'\n       END AS status_code,\n       CASE\n           WHEN a.request_type IS NULL THEN 'non_billable'\n           ELSE a.request_type\n       END AS request_type,\n       'Cohort 2, 3' AS cohort,\n       'cohort_2_3' AS dummy,\n       b.vertical,\n       a.account,\n       COALESCE(b.sfdc_account_id, a.account) AS sfdc_account_id,\n       sum(a.num_requests) AS num_requests\nFROM analytics.api_requests a\nINNER JOIN cohort_mapping b ON a.account = b.id\nAND b.cohort IN ('Cohort 2',\n                 'Cohort 3')\nLEFT JOIN service_mapping c ON a.service = c.service\nWHERE cast(a.dt AS DATE) > cast('{run_date}' AS DATE) - INTERVAL '14' DAY\n  AND cast(a.dt AS DATE) <= cast('{run_date}' AS DATE)\n  AND a.account != 'unknown'\n  AND b.cohort IN ('Cohort 2',\n                   'Cohort 3')\nGROUP BY 1,\n         2,\n         3,\n         4,\n         5,\n         6,\n         7,\n         8,\n         9,\n         10,\n         11,\n         12),", "cubed_data0_pre": {"no alias": "SELECT dt_week,           log_source,           platform,           service,           service_org,           status_code,           request_type,           cohort,           dummy,           vertical,           account,           sfdc_account_id,           sum(num_requests) AS num_requests    FROM weekly_data0    GROUP BY dt_week,             log_source,             platform,             service,             service_org,             status_code,             request_type,             account,             cohort,             dummy,             vertical,             sfdc_account_id WITH CUBE", "main": "SELECT dt_week,\n       log_source,\n       platform,\n       service,\n       service_org,\n       status_code,\n       request_type,\n       cohort,\n       vertical,\n       account,\n       sfdc_account_id,\n       num_requests\nFROM\nWHERE dummy IS NOT NULL\n  AND NOT (cohort IS NULL\n           AND dummy != 'all_cohort')\n  AND NOT (service IS NOT NULL\n           AND service_org IS NULL)\n  AND sfdc_account_id IS NOT NULL\n  AND dt_week IS NOT NULL ), "}, "cubed_data": {"a),": "cubed_data0_pre", "main": "SELECT a.dt_week,\n       COALESCE(a.log_source, '_all') AS log_source,\n       COALESCE(a.platform, '_all') AS platform,\n       COALESCE(a.service, '_all') AS service,\n       COALESCE(a.service_org, '_all') AS service_org,\n       COALESCE(a.status_code, '_all') AS status_code,\n       COALESCE(a.request_type, '_all') AS request_type,\n       COALESCE(a.cohort, '_all') AS cohort,\n       COALESCE(a.vertical, '_all') AS vertical,\n       COALESCE(a.account, '_all') AS account,\n       a.sfdc_account_id AS sfdc_account_id,\n       a.num_requests\nFROM cubed_data0_pre a), "}, "this_week": {"main": "SELECT dt_week,\n       log_source,\n       platform,\n       service,\n       service_org,\n       status_code,\n       request_type,\n       cohort,\n       vertical,\n       account AS account_a,\n       sfdc_account_id,\n       num_requests\nFROM cubed_data), "}, "last_week": {"main": "SELECT cast(dt_week AS DATE) + INTERVAL '7' DAY AS dt_week,\n                                                   log_source,\n                                                   platform,\n                                                   service,\n                                                   service_org,\n                                                   status_code,\n                                                   request_type,\n                                                   cohort,\n                                                   vertical,\n                                                   account AS account_b,\n                                                   sfdc_account_id,\n                                                   num_requests\nFROM cubed_data), "}, "total_join": {"a": "this_week", "DATE)),": "AND a.sfdc_account_id = b.sfdc_account_id AND a.cohort = b.cohort AND a.vertical = b.vertical AND a.service = b.service AND a.service_org = b.service_org AND a.log_source = b.log_source AND a.platform = b.platform AND a.request_type = b.request_type AND a.status_code = b.status_code AND cast(a.dt_week AS DATE) = cast(b.dt_week AS", "main": "SELECT coalesce(b.account_b, a.account_a) AS account,\n       coalesce(b.sfdc_account_id, a.sfdc_account_id) AS sfdc_account_id,\n       coalesce(b.cohort, a.cohort) AS cohort,\n       coalesce(b.vertical, a.vertical) AS vertical,\n       coalesce(cast(b.dt_week AS DATE), cast(a.dt_week AS DATE)) AS dt_week,\n       coalesce(b.service, a.service) AS service,\n       coalesce(b.service_org, a.service_org) AS service_org,\n       coalesce(b.log_source, a.log_source) AS log_source,\n       coalesce(b.platform, a.platform) AS platform,\n       coalesce(b.status_code, a.status_code) AS status_code,\n       coalesce(b.request_type, a.request_type) AS request_type,\n       coalesce(a.num_requests, 0) AS this_week,\n       coalesce(b.num_requests, 0) AS last_week,\n       COALESCE(a.num_requests, 0) - coalesce(b.num_requests, 0) AS diff\nFROM this_week a\nLEFT JOIN last_week b ON a.account_a = b.account_b "}, "winners_pre": {"main": "SELECT *,\n       row_number() OVER (PARTITION BY dt_week,\n                                       log_source,\n                                       service,\n                                       service_org,\n                                       platform,\n                                       request_type,\n                                       status_code,\n                                       cohort,\n                                       vertical\n                          ORDER BY diff DESC) AS rank\nFROM total_join\nWHERE account = '_all'\n  AND cast(dt_week AS DATE) + INTERVAL '6' DAY = cast('{run_date}' AS DATE)\n  AND diff > 0\n  AND account != 'unknown'\nUNION ALL\nSELECT *,\n       row_number() OVER (PARTITION BY dt_week,\n                                       log_source,\n                                       service,\n                                       service_org,\n                                       platform,\n                                       request_type,\n                                       status_code,\n                                       cohort, "}, "winners": {"main": "SELECT 'Winners' AS category,\n       log_source,\n       service,\n       service_org,\n       account,\n       sfdc_account_id,\n       cohort,\n       vertical,\n       platform,\n       status_code,\n       request_type,\n       cast(dt_week AS DATE) + INTERVAL '6' DAY AS dt_week,\n                                                   this_week,\n                                                   last_week,\n                                                   diff,\n                                                   rank\nFROM winners_pre\nWHERE rank <= 50\n  AND diff > 0\n  AND account != 'unknown' ), "}, "losers_pre": {"main": "SELECT *,\n       row_number() OVER (PARTITION BY dt_week,\n                                       log_source,\n                                       service,\n                                       service_org,\n                                       platform,\n                                       request_type,\n                                       status_code,\n                                       cohort,\n                                       vertical\n                          ORDER BY diff ASC) AS rank\nFROM total_join\nWHERE account = '_all'\n  AND cast(dt_week AS DATE) + INTERVAL '6' DAY = cast('{run_date}' AS DATE)\n  AND diff < 0\n  AND account != 'unknown'\nUNION ALL\nSELECT *,\n       row_number() OVER (PARTITION BY dt_week,\n                                       log_source,\n                                       service,\n                                       service_org,\n                                       platform,\n                                       request_type,\n                                       status_code,\n                                       cohort, "}, "losers": {"main": "SELECT 'Losers' AS category,\n       log_source,\n       service,\n       service_org,\n       account,\n       sfdc_account_id,\n       cohort,\n       vertical,\n       platform,\n       status_code,\n       request_type,\n       cast(dt_week AS DATE) + INTERVAL '6' DAY AS dt_week,\n                                                   this_week,\n                                                   last_week,\n                                                   diff,\n                                                   rank\nFROM losers_pre\nWHERE rank <= 50\n  AND diff < 0\n  AND account != 'unknown' ), "}, "final_winners_losers": {"main": "SELECT category,\n       log_source,\n       service,\n       service_org,\n       account,\n       sfdc_account_id,\n       cohort,\n       vertical,\n       platform,\n       status_code,\n       request_type,\n       this_week,\n       last_week,\n       diff,\n       rank\nFROM losers\nWHERE cast(dt_week AS DATE) = cast('{run_date}' AS DATE)\nUNION ALL\nSELECT category,\n       log_source,\n       service,\n       service_org,\n       account,\n       sfdc_account_id,\n       cohort,\n       vertical,\n       platform,\n       status_code,\n       request_type,\n       this_week,\n       last_week, "}, "main": {"main": "SELECT *\nFROM final_winners_losers "}}